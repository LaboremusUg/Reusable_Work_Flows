name: Deploy a Dotnet application.

on:
  workflow_call:
    inputs:
      CLIENT:
        type: string
      CLIENT_ENV:
        type: string
      AZURE_WEBAPP_NAME:
        type: string
      DOTNET_VERSION:
        type: string
      AZURE_WEBAPP_PACKAGE_PATH:
        type: string
      PROJECT_NAME: 
        type: string
      SLOT_NAME:
        type: string
      DOWNLOAD_PACKAGE:
        type: string
      DEPLOY_IIS:
        type: string
      DEPLOY_AZURE:
        type: string
      ENCRYPT:
        type: string
    secrets:
      NUGET_URL:
        required: false
      NUGET_TOKEN:
        required: false
      AZURE_WEBAPP_PUBLISH_PROFILE:
        required: false
      AZURE_CREDENTIALS:
        required: false
      SERVER_IP:
        required: false
      SERVER_PORT:
        required: false
jobs:
  Build-Deploy:
    runs-on: windows-latest
    environment: 'Production'
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ inputs.DOTNET_VERSION }}
          source-url: ${{ secrets.NUGET_URL }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}
          
      #- name: Test ðŸ§ª
       # run: dotnet test ${{inputs.PROJECT_NAME}}.Tests\${{inputs.PROJECT_NAME}}.Tests.csproj
          
      - name: Publish
        run: dotnet publish ${{inputs.PROJECT_NAME}}\${{inputs.PROJECT_NAME}}.csproj --configuration Release -o ${{ env.DOTNET_ROOT}}\myapp /p:EnvironmentName=${{inputs.CLIENT}}${{inputs.CLIENT_ENV}}
      
      #Removes appsettings files that are not for DFCU
      - name: Remove appsettings files
        run: |
          cd ${{ env.DOTNET_ROOT}}/myapp
          $jsonFiles = Get-ChildItem appsettings*json
          foreach ($file in $jsonFiles) {
            if ($file.Name -inotcontains "appsettings.json") {
              if ($file.Name -inotcontains "appsettings.Config.json") {
                if ($file.Name -inotcontains "appsettings.${{inputs.CLIENT_ENV}}.json"){
                  #Write-Host -id 3 -activity "Removing File $($file.Name)" -Status "In progress"
                  Write-Host "$(Get-Date -f $timeStampFormat) - Removing File $($file.Name): In progress"
                  Remove-Item $file
                }
              }     
            }   
          }
          cd ..
        shell: pwsh

      - name: Encrpt appettings
        if: ${{ inputs.ENCRYPT == 'true' }}
        shell: pwsh
        run: |
          git clone https://github.com/tmcoma/RepoCrypto.git "$HOME\Documents\WindowsPowerShell\Modules\RepoCrypto"
          
          cd ${{ env.DOTNET_ROOT}}\myapp
          Import-Module $HOME\Documents\WindowsPowerShell\Modules\RepoCrypto
          
          $key = 'mMXkoLZEfBk='
          Write-Host "Your Key is $($key)"
          Write-Host "$(Get-Date -f $timeStampFormat) - Replacing env appsettings file with encrypted one: In progress"
          Protect-File "appsettings.${{inputs.CLIENT_ENV}}.json" -Algorithm DES -KeyAsPlainText $key -RemoveSource

      #Creates a ZIP artifact that can be downloaded
      - name: Upload Artifact
        if: ${{ inputs.DOWNLOAD_PACKAGE == 'true' }}
        uses: actions/upload-artifact@v2.3.1
        with:
          name: ${{inputs.PROJECT_NAME}}-${{ inputs.CLIENT }}${{ inputs.CLIENT_ENV }}
          path: ${{ env.DOTNET_ROOT}}/myapp
          retention-days: 1 

      #Application pool must be stopped first before deployment
      # - name: Stop Application Pool
      #   if: ${{ inputs.DEPLOY_IIS == 'true' }}
      #   shell: cmd
      #   run: '"C:/Program Files (x86)/IIS/Microsoft Web Deploy V3/msdeploy.exe" -verb:sync -allowUntrusted -source:recycleApp -dest:recycleApp="${{ inputs.SITE_NAME }}",recycleMode="StopAppPool",computerName="https://${{ secrets.SERVER_IP }}:${{ secrets.SERVER_PORT }}/msdeploy.axd?site=${{ inputs.SITE_NAME }}",username="LUG-TCAGENT\kevin",password="${{ secrets.WEBDEPLOY_PASSWORD }}",AuthType="Basic"'

      - name: Deploy
        if: ${{ inputs.DEPLOY_IIS == 'true' }}
        shell: cmd
        run: '"C:/Program Files/IIS/Microsoft Web Deploy V3/msdeploy.exe" -verb:sync -allowUntrusted -source:contentPath="${{ env.DOTNET_ROOT}}/myapp" -dest:contentPath="${{ inputs.SITE_NAME }}",computerName="https://${{ secrets.SERVER_IP }}:${{ secrets.SERVER_PORT }}/msdeploy.axd?site=${{ inputs.SITE_NAME }}",username="${{ secrets.WEBDEPLOY_USER }}",password="${{ secrets.WEBDEPLOY_PASSWORD }}",authtype="Basic"'
      
      # - name: Start Application Pool
      #   if: ${{ inputs.DEPLOY_IIS == 'true' }}
      #   shell: cmd
      #   run: '"C:/Program Files (x86)/IIS/Microsoft Web Deploy V3/msdeploy.exe" -verb:sync -allowUntrusted -source:recycleApp -dest:recycleApp="${{ inputs.SITE_NAME }}",recycleMode="StartAppPool",computerName="https://${{ secrets.SERVER_IP }}:${{ secrets.SERVER_PORT }}/msdeploy.axd?site=${{ inputs.SITE_NAME }}",username="LUG-TCAGENT\kevin",password="${{ secrets.WEBDEPLOY_PASSWORD }}",AuthType="Basic"'

          
      - name: Login
        if: ${{ inputs.DEPLOY_AZURE == 'true' }}
        uses: Azure/login@v1.4.3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        
      - name: Deploy
        if: ${{ inputs.DEPLOY_AZURE == 'true' }}
        id: deploy-to-webapp 
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ inputs.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{env.DOTNET_ROOT}}/myapp
          slot-name: ${{ inputs.SLOT_NAME }}
          

